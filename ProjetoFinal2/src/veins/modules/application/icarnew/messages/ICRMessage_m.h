//
// Generated file, do not edit! Created by nedtool 5.6 from veins/modules/application/icarnew/messages/ICRMessage.msg.
//

#ifndef __VEINS_ICRMESSAGE_M_H
#define __VEINS_ICRMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef VEINS_API
#  if defined(VEINS_EXPORT)
#    define VEINS_API  OPP_DLLEXPORT
#  elif defined(VEINS_IMPORT)
#    define VEINS_API  OPP_DLLIMPORT
#  else
#    define VEINS_API
#  endif
#endif


namespace veins {

class ICRMessage;
} // namespace veins

#include "veins/modules/messages/BaseFrame1609_4_m.h" // import veins.modules.messages.BaseFrame1609_4

#include "veins/modules/application/icarnew/messages/ICRNode_m.h" // import veins.modules.application.icarnew.messages.ICRNode


namespace veins {

/**
 * Class generated from <tt>veins/modules/application/icarnew/messages/ICRMessage.msg:16</tt> by nedtool.
 * <pre>
 * class ICRMessage extends BaseFrame1609_4
 * {
 *     unsigned long numMsg; // number of message
 *     int msgType; // message type 
 *     simtime_t msgLifeTime; // message life time - 16 bits
 *     simtime_t validityDataTimeStamp; // validity timeout of the menor neighborhood condition of the route nodes
 *     double confidence;
 *     unsigned int hopNumber;
 *     simtime_t msgTimeStamp = 0; // timestamp da mensagem
 * 
 *     ICRNode sourceNode;
 * 
 *     ICRNode transmissorNode;
 * 
 *     ICRNode nextNode;
 * 
 *     ICRNode destinyNode;
 * 
 * }
 * </pre>
 */
class VEINS_API ICRMessage : public ::veins::BaseFrame1609_4
{
  protected:
    unsigned long numMsg = 0;
    int msgType = 0;
    omnetpp::simtime_t msgLifeTime = SIMTIME_ZERO;
    omnetpp::simtime_t validityDataTimeStamp = SIMTIME_ZERO;
    double confidence = 0;
    unsigned int hopNumber = 0;
    omnetpp::simtime_t msgTimeStamp = 0;
    ICRNode sourceNode;
    ICRNode transmissorNode;
    ICRNode nextNode;
    ICRNode destinyNode;

  private:
    void copy(const ICRMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ICRMessage&);

  public:
    ICRMessage(const char *name=nullptr);
    ICRMessage(const ICRMessage& other);
    virtual ~ICRMessage();
    ICRMessage& operator=(const ICRMessage& other);
    virtual ICRMessage *dup() const override {return new ICRMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned long getNumMsg() const;
    virtual void setNumMsg(unsigned long numMsg);
    virtual int getMsgType() const;
    virtual void setMsgType(int msgType);
    virtual omnetpp::simtime_t getMsgLifeTime() const;
    virtual void setMsgLifeTime(omnetpp::simtime_t msgLifeTime);
    virtual omnetpp::simtime_t getValidityDataTimeStamp() const;
    virtual void setValidityDataTimeStamp(omnetpp::simtime_t validityDataTimeStamp);
    virtual double getConfidence() const;
    virtual void setConfidence(double confidence);
    virtual unsigned int getHopNumber() const;
    virtual void setHopNumber(unsigned int hopNumber);
    virtual omnetpp::simtime_t getMsgTimeStamp() const;
    virtual void setMsgTimeStamp(omnetpp::simtime_t msgTimeStamp);
    virtual const ICRNode& getSourceNode() const;
    virtual ICRNode& getSourceNodeForUpdate() { return const_cast<ICRNode&>(const_cast<ICRMessage*>(this)->getSourceNode());}
    virtual void setSourceNode(const ICRNode& sourceNode);
    virtual const ICRNode& getTransmissorNode() const;
    virtual ICRNode& getTransmissorNodeForUpdate() { return const_cast<ICRNode&>(const_cast<ICRMessage*>(this)->getTransmissorNode());}
    virtual void setTransmissorNode(const ICRNode& transmissorNode);
    virtual const ICRNode& getNextNode() const;
    virtual ICRNode& getNextNodeForUpdate() { return const_cast<ICRNode&>(const_cast<ICRMessage*>(this)->getNextNode());}
    virtual void setNextNode(const ICRNode& nextNode);
    virtual const ICRNode& getDestinyNode() const;
    virtual ICRNode& getDestinyNodeForUpdate() { return const_cast<ICRNode&>(const_cast<ICRMessage*>(this)->getDestinyNode());}
    virtual void setDestinyNode(const ICRNode& destinyNode);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ICRMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ICRMessage& obj) {obj.parsimUnpack(b);}

} // namespace veins

#endif // ifndef __VEINS_ICRMESSAGE_M_H

